//Module        : gsl_vector_double_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_vector_double.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_VECTOR_DOUBLE_H__
header '#include <gsl/gsl_vector_double.h>';

//INCLUDES
include "gsl_block_double_lib";

class gsl_vector_double_h
{
  open C_hack;
  open gsl_block_double_h;

  //ABSTRACT TYPES
  type _gsl_vector_view = '_gsl_vector_view';
  type gsl_vector = 'gsl_vector';
  type _gsl_vector_const_view = '_gsl_vector_const_view';

  //TYPE ALIASES
  typedef gsl_vector_const_view = _gsl_vector_const_view;
  typedef gsl_vector_view = _gsl_vector_view;

  //PROCEDURES
  proc gsl_vector_free: ptr[gsl_vector];
  proc gsl_vector_minmax: cptr[gsl_vector] * ptr[double] * ptr[double];
  proc gsl_vector_minmax_index: cptr[gsl_vector] * ptr[size] * ptr[size];
  proc gsl_vector_set: ptr[gsl_vector] * size * double;
  proc gsl_vector_set_all: ptr[gsl_vector] * double;
  proc gsl_vector_set_zero: ptr[gsl_vector];

  //FUNCTIONS
  fun gsl_vector_add: ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_vector_add_constant: ptr[gsl_vector] * double -> int;
  fun gsl_vector_alloc: size -> ptr[gsl_vector];
  fun gsl_vector_alloc_from_block: ptr[gsl_block] * size * size * size -> ptr[gsl_vector];
  fun gsl_vector_alloc_from_vector: ptr[gsl_vector] * size * size * size -> ptr[gsl_vector];
  fun gsl_vector_calloc: size -> ptr[gsl_vector];
  fun gsl_vector_const_ptr: cptr[gsl_vector] * size -> cptr[double];
  fun gsl_vector_const_subvector: cptr[gsl_vector] * size * size -> _gsl_vector_const_view;
  fun gsl_vector_const_subvector_with_stride: cptr[gsl_vector] * size * size * size -> _gsl_vector_const_view;
  fun gsl_vector_const_view_array: cptr[double] * size -> _gsl_vector_const_view;
  fun gsl_vector_const_view_array_with_stride: cptr[double] * size * size -> _gsl_vector_const_view;
  fun gsl_vector_div: ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_vector_fprintf: ptr[FILE] * cptr[gsl_vector] * cptr[char] -> int;
  fun gsl_vector_fread: ptr[FILE] * ptr[gsl_vector] -> int;
  fun gsl_vector_fscanf: ptr[FILE] * ptr[gsl_vector] -> int;
  fun gsl_vector_fwrite: ptr[FILE] * cptr[gsl_vector] -> int;
  fun gsl_vector_get: cptr[gsl_vector] * size -> double;
  fun gsl_vector_isnull: cptr[gsl_vector] -> int;
  fun gsl_vector_max: cptr[gsl_vector] -> double;
  fun gsl_vector_max_index: cptr[gsl_vector] -> size;
  fun gsl_vector_memcpy: ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_vector_min: cptr[gsl_vector] -> double;
  fun gsl_vector_min_index: cptr[gsl_vector] -> size;
  fun gsl_vector_mul: ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_vector_ptr: ptr[gsl_vector] * size -> ptr[double];
  fun gsl_vector_reverse: ptr[gsl_vector] -> int;
  fun gsl_vector_scale: ptr[gsl_vector] * double -> int;
  fun gsl_vector_set_basis: ptr[gsl_vector] * size -> int;
  fun gsl_vector_sub: ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_vector_subvector: ptr[gsl_vector] * size * size -> _gsl_vector_view;
  fun gsl_vector_subvector_with_stride: ptr[gsl_vector] * size * size * size -> _gsl_vector_view;
  fun gsl_vector_swap: ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_vector_swap_elements: ptr[gsl_vector] * size * size -> int;
  fun gsl_vector_view_array: ptr[double] * size -> _gsl_vector_view;
  fun gsl_vector_view_array_with_stride: ptr[double] * size * size -> _gsl_vector_view;
}
