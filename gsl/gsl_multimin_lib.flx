//Module        : gsl_multimin_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_multimin.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define GSL_MULTIMIN_FN_EVAL_F_DF(F,x,y,g) (*((F)->fdf))(x,(F)->params,(y),(g))
//#define GSL_MULTIMIN_FN_EVAL_DF(F,x,g) (*((F)->df))(x,(F)->params,(g))
//#define GSL_MULTIMIN_FN_EVAL_F(F,x) (*((F)->f))(x,(F)->params)
//#define GSL_MULTIMIN_FN_EVAL(F,x) (*((F)->f))(x,(F)->params)
//#define __GSL_MULTIMIN_H__
header '#include <gsl/gsl_multimin.h>';

//INCLUDES
include "gsl_multimin_function_fdf_struct_lib";
include "gsl_multimin_function_struct_lib";
include "gsl_vector_double_lib";

class gsl_multimin_h
{
  open C_hack;
  open gsl_multimin_function_fdf_struct_h;
  open gsl_multimin_function_struct_h;
  open gsl_vector_double_h;

  //ABSTRACT TYPES
  type gsl_multimin_fminimizer = 'gsl_multimin_fminimizer';
  type gsl_multimin_fdfminimizer = 'gsl_multimin_fdfminimizer';
  type gsl_multimin_fdfminimizer_type = 'gsl_multimin_fdfminimizer_type';
  type gsl_multimin_fminimizer_type = 'gsl_multimin_fminimizer_type';

  //CSTRUCTS
  cstruct gsl_multimin_function_fdf_struct {
    f: gsl_multimin_h_cft_1;
    df: gsl_multimin_h_cft_2;
    fdf: gsl_multimin_h_cft_3;
    n: size;
    params: address;
  }
  cstruct gsl_multimin_function_struct {
    f: gsl_multimin_h_cft_1;
    n: size;
    params: address;
  }

  //C FUNCTION POINTER TYPES
  header '''typedef void (*gsl_multimin_h_cft_3)(gsl_vector const *,  void *, double *,  gsl_vector *);''';
  type gsl_multimin_h_cft_3 = 'gsl_multimin_h_cft_3';
  header '''typedef void (*gsl_multimin_h_cft_2)(gsl_vector const *,  void *, gsl_vector *);''';
  type gsl_multimin_h_cft_2 = 'gsl_multimin_h_cft_2';
  header '''typedef double (*gsl_multimin_h_cft_1)(gsl_vector const *,  void *);''';
  type gsl_multimin_h_cft_1 = 'gsl_multimin_h_cft_1';

  //STRUCT or UNION TAG ALIASES
  typedef gsl_multimin_function = gsl_multimin_function_struct;
  typedef gsl_multimin_function_fdf = gsl_multimin_function_fdf_struct;

  //TYPE ALIASES
  typedef _struct_gsl_multimin_function_struct = gsl_multimin_function_struct;
  typedef _struct_gsl_multimin_function_fdf_struct = gsl_multimin_function_fdf_struct;

  //VARIABLES
  const gsl_multimin_fdfminimizer_conjugate_pr: cptr[gsl_multimin_fdfminimizer_type] = 'gsl_multimin_fdfminimizer_conjugate_pr';
  const gsl_multimin_fdfminimizer_steepest_descent: cptr[gsl_multimin_fdfminimizer_type] = 'gsl_multimin_fdfminimizer_steepest_descent';
  const gsl_multimin_fminimizer_nmsimplex: cptr[gsl_multimin_fminimizer_type] = 'gsl_multimin_fminimizer_nmsimplex';
  const gsl_multimin_fdfminimizer_conjugate_fr: cptr[gsl_multimin_fdfminimizer_type] = 'gsl_multimin_fdfminimizer_conjugate_fr';
  const gsl_multimin_fdfminimizer_vector_bfgs: cptr[gsl_multimin_fdfminimizer_type] = 'gsl_multimin_fdfminimizer_vector_bfgs';

  //PROCEDURES
  proc gsl_multimin_fdfminimizer_free: ptr[gsl_multimin_fdfminimizer];
  proc gsl_multimin_fminimizer_free: ptr[gsl_multimin_fminimizer];

  //FUNCTIONS
  fun gsl_multimin_diff: cptr[gsl_multimin_function] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_multimin_fdfminimizer_alloc: cptr[gsl_multimin_fdfminimizer_type] * size -> ptr[gsl_multimin_fdfminimizer];
  fun gsl_multimin_fdfminimizer_dx: ptr[gsl_multimin_fdfminimizer] -> ptr[gsl_vector];
  fun gsl_multimin_fdfminimizer_gradient: ptr[gsl_multimin_fdfminimizer] -> ptr[gsl_vector];
  fun gsl_multimin_fdfminimizer_iterate: ptr[gsl_multimin_fdfminimizer] -> int;
  fun gsl_multimin_fdfminimizer_minimum: ptr[gsl_multimin_fdfminimizer] -> double;
  fun gsl_multimin_fdfminimizer_name: cptr[gsl_multimin_fdfminimizer] -> cptr[char];
  fun gsl_multimin_fdfminimizer_restart: ptr[gsl_multimin_fdfminimizer] -> int;
  fun gsl_multimin_fdfminimizer_set: ptr[gsl_multimin_fdfminimizer] * ptr[gsl_multimin_function_fdf] * cptr[gsl_vector] * double * double -> int;
  fun gsl_multimin_fdfminimizer_x: ptr[gsl_multimin_fdfminimizer] -> ptr[gsl_vector];
  fun gsl_multimin_fminimizer_alloc: cptr[gsl_multimin_fminimizer_type] * size -> ptr[gsl_multimin_fminimizer];
  fun gsl_multimin_fminimizer_iterate: ptr[gsl_multimin_fminimizer] -> int;
  fun gsl_multimin_fminimizer_minimum: cptr[gsl_multimin_fminimizer] -> double;
  fun gsl_multimin_fminimizer_name: cptr[gsl_multimin_fminimizer] -> cptr[char];
  fun gsl_multimin_fminimizer_set: ptr[gsl_multimin_fminimizer] * ptr[gsl_multimin_function] * cptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_multimin_fminimizer_size: cptr[gsl_multimin_fminimizer] -> double;
  fun gsl_multimin_fminimizer_x: cptr[gsl_multimin_fminimizer] -> ptr[gsl_vector];
  fun gsl_multimin_test_gradient: cptr[gsl_vector] * double -> int;
  fun gsl_multimin_test_size: double * double -> int;
}
