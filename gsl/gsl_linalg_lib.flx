//Module        : gsl_linalg_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_linalg.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_LINALG_H__
header '#include <gsl/gsl_linalg.h>';

//INCLUDES
include "gsl_complex_lib";
include "gsl_matrix_complex_double_lib";
include "gsl_matrix_double_lib";
include "gsl_mode_lib";
include "gsl_permutation_lib";
include "gsl_vector_complex_double_lib";
include "gsl_vector_double_lib";

class gsl_linalg_h
{
  open C_hack;
  open gsl_complex_h;
  open gsl_matrix_complex_double_h;
  open gsl_matrix_double_h;
  open gsl_mode_h;
  open gsl_permutation_h;
  open gsl_vector_complex_double_h;
  open gsl_vector_double_h;

  //ABSTRACT TYPES
  type gsl_linalg_matrix_mod_t = 'gsl_linalg_matrix_mod_t';

  //ENUMERATION CONSTANTS
  const GSL_LINALG_MOD_CONJUGATE: int = 'GSL_LINALG_MOD_CONJUGATE';
  const GSL_LINALG_MOD_TRANSPOSE: int = 'GSL_LINALG_MOD_TRANSPOSE';
  const GSL_LINALG_MOD_NONE: int = 'GSL_LINALG_MOD_NONE';

  //FUNCTIONS
  fun gsl_linalg_HH_solve: ptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_HH_svx: ptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_LQsolve: ptr[gsl_matrix] * ptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_Lsolve_T: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_Lsvx_T: cptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_decomp: ptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_lssolve_T: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_solve_T: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_svx_T: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_unpack: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_matrix] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_LQ_update: ptr[gsl_matrix] * ptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_vecQ: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LQ_vecQT: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LU_decomp: ptr[gsl_matrix] * ptr[gsl_permutation] * ptr[int] -> int;
  fun gsl_linalg_LU_det: ptr[gsl_matrix] * int -> double;
  fun gsl_linalg_LU_invert: cptr[gsl_matrix] * cptr[gsl_permutation] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_LU_lndet: ptr[gsl_matrix] -> double;
  fun gsl_linalg_LU_refine: cptr[gsl_matrix] * cptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LU_sgndet: ptr[gsl_matrix] * int -> int;
  fun gsl_linalg_LU_solve: cptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_LU_svx: cptr[gsl_matrix] * cptr[gsl_permutation] * ptr[gsl_vector] -> int;
  fun gsl_linalg_L_solve_T: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_LQsolve_T: cptr[gsl_matrix] * cptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_Lsolve_T: cptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_Lsvx_T: cptr[gsl_matrix] * cptr[gsl_permutation] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_decomp: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_permutation] * ptr[int] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_decomp2: cptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_permutation] * ptr[int] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_solve_T: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_svx_T: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_permutation] * ptr[gsl_vector] -> int;
  fun gsl_linalg_PTLQ_update: ptr[gsl_matrix] * ptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_QRsolve: cptr[gsl_matrix] * cptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_Rsolve: cptr[gsl_matrix] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_Rsvx: cptr[gsl_matrix] * cptr[gsl_permutation] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_decomp: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_permutation] * ptr[int] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_decomp2: cptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_permutation] * ptr[int] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_solve: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_permutation] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_svx: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_permutation] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QRPT_update: ptr[gsl_matrix] * ptr[gsl_matrix] * cptr[gsl_permutation] * ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_linalg_QR_QRsolve: ptr[gsl_matrix] * ptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_QTvec: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_Qvec: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_Rsolve: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_Rsvx: cptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_decomp: ptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_lssolve: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_solve: cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_svx: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_QR_unpack: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_matrix] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_QR_update: ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_vector] * cptr[gsl_vector] -> int;
  fun gsl_linalg_R_solve: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_R_svx: cptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_SV_decomp: ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_SV_decomp_jacobi: ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_SV_decomp_mod: ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_SV_solve: cptr[gsl_matrix] * cptr[gsl_matrix] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_balance_columns: ptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_bidiag_decomp: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_bidiag_unpack: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_bidiag_unpack2: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_bidiag_unpack_B: cptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_cholesky_decomp: ptr[gsl_matrix] -> int;
  fun gsl_linalg_cholesky_solve: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_cholesky_svx: cptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_complex_LU_decomp: ptr[gsl_matrix_complex] * ptr[gsl_permutation] * ptr[int] -> int;
  fun gsl_linalg_complex_LU_det: ptr[gsl_matrix_complex] * int -> gsl_complex;
  fun gsl_linalg_complex_LU_invert: cptr[gsl_matrix_complex] * cptr[gsl_permutation] * ptr[gsl_matrix_complex] -> int;
  fun gsl_linalg_complex_LU_lndet: ptr[gsl_matrix_complex] -> double;
  fun gsl_linalg_complex_LU_refine: cptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] * cptr[gsl_permutation] * cptr[gsl_vector_complex] * ptr[gsl_vector_complex] * ptr[gsl_vector_complex] -> int;
  fun gsl_linalg_complex_LU_sgndet: ptr[gsl_matrix_complex] * int -> gsl_complex;
  fun gsl_linalg_complex_LU_solve: cptr[gsl_matrix_complex] * cptr[gsl_permutation] * cptr[gsl_vector_complex] * ptr[gsl_vector_complex] -> int;
  fun gsl_linalg_complex_LU_svx: cptr[gsl_matrix_complex] * cptr[gsl_permutation] * ptr[gsl_vector_complex] -> int;
  fun gsl_linalg_complex_householder_hm: gsl_complex * cptr[gsl_vector_complex] * ptr[gsl_matrix_complex] -> int;
  fun gsl_linalg_complex_householder_hv: gsl_complex * cptr[gsl_vector_complex] * ptr[gsl_vector_complex] -> int;
  fun gsl_linalg_complex_householder_transform: ptr[gsl_vector_complex] -> gsl_complex;
  fun gsl_linalg_exponential_ss: cptr[gsl_matrix] * ptr[gsl_matrix] * gsl_mode_t -> int;
  fun gsl_linalg_hermtd_decomp: ptr[gsl_matrix_complex] * ptr[gsl_vector_complex] -> int;
  fun gsl_linalg_hermtd_unpack: cptr[gsl_matrix_complex] * cptr[gsl_vector_complex] * ptr[gsl_matrix_complex] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_hermtd_unpack_T: cptr[gsl_matrix_complex] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_householder_hm: double * cptr[gsl_vector] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_householder_hm1: double * ptr[gsl_matrix] -> int;
  fun gsl_linalg_householder_hv: double * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_householder_mh: double * cptr[gsl_vector] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_householder_transform: ptr[gsl_vector] -> double;
  fun gsl_linalg_matmult: cptr[gsl_matrix] * cptr[gsl_matrix] * ptr[gsl_matrix] -> int;
  fun gsl_linalg_matmult_mod: cptr[gsl_matrix] * gsl_linalg_matrix_mod_t * cptr[gsl_matrix] * gsl_linalg_matrix_mod_t * ptr[gsl_matrix] -> int;
  fun gsl_linalg_solve_cyc_tridiag: cptr[gsl_vector] * cptr[gsl_vector] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_solve_symm_cyc_tridiag: cptr[gsl_vector] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_solve_symm_tridiag: cptr[gsl_vector] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_solve_tridiag: cptr[gsl_vector] * cptr[gsl_vector] * cptr[gsl_vector] * cptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_symmtd_decomp: ptr[gsl_matrix] * ptr[gsl_vector] -> int;
  fun gsl_linalg_symmtd_unpack: cptr[gsl_matrix] * cptr[gsl_vector] * ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
  fun gsl_linalg_symmtd_unpack_T: cptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_vector] -> int;
}
