//Module        : gsl_matrix_complex_double_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_matrix_complex_double.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_MATRIX_COMPLEX_DOUBLE_H__
header '#include <gsl/gsl_matrix_complex_double.h>';

//INCLUDES
include "gsl_block_complex_double_lib";
include "gsl_complex_lib";
include "gsl_vector_complex_double_lib";

class gsl_matrix_complex_double_h
{
  open C_hack;
  open gsl_block_complex_double_h;
  open gsl_complex_h;
  open gsl_vector_complex_double_h;

  //ABSTRACT TYPES
  type gsl_matrix_complex = 'gsl_matrix_complex';
  type _gsl_matrix_complex_const_view = '_gsl_matrix_complex_const_view';
  type _gsl_matrix_complex_view = '_gsl_matrix_complex_view';

  //TYPE ALIASES
  typedef gsl_matrix_complex_view = _gsl_matrix_complex_view;
  typedef gsl_matrix_complex_const_view = _gsl_matrix_complex_const_view;

  //PROCEDURES
  proc gsl_matrix_complex_free: ptr[gsl_matrix_complex];
  proc gsl_matrix_complex_set: ptr[gsl_matrix_complex] * size * size * gsl_complex;
  proc gsl_matrix_complex_set_all: ptr[gsl_matrix_complex] * gsl_complex;
  proc gsl_matrix_complex_set_identity: ptr[gsl_matrix_complex];
  proc gsl_matrix_complex_set_zero: ptr[gsl_matrix_complex];

  //FUNCTIONS
  fun gsl_matrix_complex_add: ptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_add_constant: ptr[gsl_matrix_complex] * gsl_complex -> int;
  fun gsl_matrix_complex_add_diagonal: ptr[gsl_matrix_complex] * gsl_complex -> int;
  fun gsl_matrix_complex_alloc: size * size -> ptr[gsl_matrix_complex];
  fun gsl_matrix_complex_alloc_from_block: ptr[gsl_block_complex] * size * size * size * size -> ptr[gsl_matrix_complex];
  fun gsl_matrix_complex_alloc_from_matrix: ptr[gsl_matrix_complex] * size * size * size * size -> ptr[gsl_matrix_complex];
  fun gsl_matrix_complex_calloc: size * size -> ptr[gsl_matrix_complex];
  fun gsl_matrix_complex_column: ptr[gsl_matrix_complex] * size -> _gsl_vector_complex_view;
  fun gsl_matrix_complex_const_column: cptr[gsl_matrix_complex] * size -> _gsl_vector_complex_const_view;
  fun gsl_matrix_complex_const_diagonal: cptr[gsl_matrix_complex] -> _gsl_vector_complex_const_view;
  fun gsl_matrix_complex_const_ptr: cptr[gsl_matrix_complex] * size * size -> cptr[gsl_complex];
  fun gsl_matrix_complex_const_row: cptr[gsl_matrix_complex] * size -> _gsl_vector_complex_const_view;
  fun gsl_matrix_complex_const_subdiagonal: cptr[gsl_matrix_complex] * size -> _gsl_vector_complex_const_view;
  fun gsl_matrix_complex_const_submatrix: cptr[gsl_matrix_complex] * size * size * size * size -> _gsl_matrix_complex_const_view;
  fun gsl_matrix_complex_const_superdiagonal: cptr[gsl_matrix_complex] * size -> _gsl_vector_complex_const_view;
  fun gsl_matrix_complex_const_view_array: cptr[double] * size * size -> _gsl_matrix_complex_const_view;
  fun gsl_matrix_complex_const_view_array_with_tda: cptr[double] * size * size * size -> _gsl_matrix_complex_const_view;
  fun gsl_matrix_complex_const_view_vector: cptr[gsl_vector_complex] * size * size -> _gsl_matrix_complex_const_view;
  fun gsl_matrix_complex_const_view_vector_with_tda: cptr[gsl_vector_complex] * size * size * size -> _gsl_matrix_complex_const_view;
  fun gsl_matrix_complex_diagonal: ptr[gsl_matrix_complex] -> _gsl_vector_complex_view;
  fun gsl_matrix_complex_div_elements: ptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_fprintf: ptr[FILE] * cptr[gsl_matrix_complex] * cptr[char] -> int;
  fun gsl_matrix_complex_fread: ptr[FILE] * ptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_fscanf: ptr[FILE] * ptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_fwrite: ptr[FILE] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_get: cptr[gsl_matrix_complex] * size * size -> gsl_complex;
  fun gsl_matrix_complex_get_col: ptr[gsl_vector_complex] * cptr[gsl_matrix_complex] * size -> int;
  fun gsl_matrix_complex_get_row: ptr[gsl_vector_complex] * cptr[gsl_matrix_complex] * size -> int;
  fun gsl_matrix_complex_isnull: cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_memcpy: ptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_mul_elements: ptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_ptr: ptr[gsl_matrix_complex] * size * size -> ptr[gsl_complex];
  fun gsl_matrix_complex_row: ptr[gsl_matrix_complex] * size -> _gsl_vector_complex_view;
  fun gsl_matrix_complex_scale: ptr[gsl_matrix_complex] * gsl_complex -> int;
  fun gsl_matrix_complex_set_col: ptr[gsl_matrix_complex] * size * cptr[gsl_vector_complex] -> int;
  fun gsl_matrix_complex_set_row: ptr[gsl_matrix_complex] * size * cptr[gsl_vector_complex] -> int;
  fun gsl_matrix_complex_sub: ptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_subdiagonal: ptr[gsl_matrix_complex] * size -> _gsl_vector_complex_view;
  fun gsl_matrix_complex_submatrix: ptr[gsl_matrix_complex] * size * size * size * size -> _gsl_matrix_complex_view;
  fun gsl_matrix_complex_superdiagonal: ptr[gsl_matrix_complex] * size -> _gsl_vector_complex_view;
  fun gsl_matrix_complex_swap: ptr[gsl_matrix_complex] * ptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_swap_columns: ptr[gsl_matrix_complex] * size * size -> int;
  fun gsl_matrix_complex_swap_rowcol: ptr[gsl_matrix_complex] * size * size -> int;
  fun gsl_matrix_complex_swap_rows: ptr[gsl_matrix_complex] * size * size -> int;
  fun gsl_matrix_complex_transpose: ptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_transpose_memcpy: ptr[gsl_matrix_complex] * cptr[gsl_matrix_complex] -> int;
  fun gsl_matrix_complex_view_array: ptr[double] * size * size -> _gsl_matrix_complex_view;
  fun gsl_matrix_complex_view_array_with_tda: ptr[double] * size * size * size -> _gsl_matrix_complex_view;
  fun gsl_matrix_complex_view_vector: ptr[gsl_vector_complex] * size * size -> _gsl_matrix_complex_view;
  fun gsl_matrix_complex_view_vector_with_tda: ptr[gsl_vector_complex] * size * size * size -> _gsl_matrix_complex_view;
  fun gsl_vector_complex_alloc_col_from_matrix: ptr[gsl_matrix_complex] * size -> ptr[gsl_vector_complex];
  fun gsl_vector_complex_alloc_row_from_matrix: ptr[gsl_matrix_complex] * size -> ptr[gsl_vector_complex];
}
