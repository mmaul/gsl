//Module        : gsl_vector_long_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_vector_long.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_VECTOR_LONG_H__
header '#include <gsl/gsl_vector_long.h>';

//INCLUDES
include "gsl_block_long_lib";

class gsl_vector_long_h
{
  open C_hack;
  open gsl_block_long_h;

  //ABSTRACT TYPES
  type _gsl_vector_long_const_view = '_gsl_vector_long_const_view';
  type gsl_vector_long = 'gsl_vector_long';
  type _gsl_vector_long_view = '_gsl_vector_long_view';

  //TYPE ALIASES
  typedef gsl_vector_long_view = _gsl_vector_long_view;
  typedef gsl_vector_long_const_view = _gsl_vector_long_const_view;

  //PROCEDURES
  proc gsl_vector_long_free: ptr[gsl_vector_long];
  proc gsl_vector_long_minmax: cptr[gsl_vector_long] * ptr[long] * ptr[long];
  proc gsl_vector_long_minmax_index: cptr[gsl_vector_long] * ptr[size] * ptr[size];
  proc gsl_vector_long_set: ptr[gsl_vector_long] * size * long;
  proc gsl_vector_long_set_all: ptr[gsl_vector_long] * long;
  proc gsl_vector_long_set_zero: ptr[gsl_vector_long];

  //FUNCTIONS
  fun gsl_vector_long_add: ptr[gsl_vector_long] * cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_add_constant: ptr[gsl_vector_long] * double -> int;
  fun gsl_vector_long_alloc: size -> ptr[gsl_vector_long];
  fun gsl_vector_long_alloc_from_block: ptr[gsl_block_long] * size * size * size -> ptr[gsl_vector_long];
  fun gsl_vector_long_alloc_from_vector: ptr[gsl_vector_long] * size * size * size -> ptr[gsl_vector_long];
  fun gsl_vector_long_calloc: size -> ptr[gsl_vector_long];
  fun gsl_vector_long_const_ptr: cptr[gsl_vector_long] * size -> cptr[long];
  fun gsl_vector_long_const_subvector: cptr[gsl_vector_long] * size * size -> _gsl_vector_long_const_view;
  fun gsl_vector_long_const_subvector_with_stride: cptr[gsl_vector_long] * size * size * size -> _gsl_vector_long_const_view;
  fun gsl_vector_long_const_view_array: cptr[long] * size -> _gsl_vector_long_const_view;
  fun gsl_vector_long_const_view_array_with_stride: cptr[long] * size * size -> _gsl_vector_long_const_view;
  fun gsl_vector_long_div: ptr[gsl_vector_long] * cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_fprintf: ptr[FILE] * cptr[gsl_vector_long] * cptr[char] -> int;
  fun gsl_vector_long_fread: ptr[FILE] * ptr[gsl_vector_long] -> int;
  fun gsl_vector_long_fscanf: ptr[FILE] * ptr[gsl_vector_long] -> int;
  fun gsl_vector_long_fwrite: ptr[FILE] * cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_get: cptr[gsl_vector_long] * size -> long;
  fun gsl_vector_long_isnull: cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_max: cptr[gsl_vector_long] -> long;
  fun gsl_vector_long_max_index: cptr[gsl_vector_long] -> size;
  fun gsl_vector_long_memcpy: ptr[gsl_vector_long] * cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_min: cptr[gsl_vector_long] -> long;
  fun gsl_vector_long_min_index: cptr[gsl_vector_long] -> size;
  fun gsl_vector_long_mul: ptr[gsl_vector_long] * cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_ptr: ptr[gsl_vector_long] * size -> ptr[long];
  fun gsl_vector_long_reverse: ptr[gsl_vector_long] -> int;
  fun gsl_vector_long_scale: ptr[gsl_vector_long] * double -> int;
  fun gsl_vector_long_set_basis: ptr[gsl_vector_long] * size -> int;
  fun gsl_vector_long_sub: ptr[gsl_vector_long] * cptr[gsl_vector_long] -> int;
  fun gsl_vector_long_subvector: ptr[gsl_vector_long] * size * size -> _gsl_vector_long_view;
  fun gsl_vector_long_subvector_with_stride: ptr[gsl_vector_long] * size * size * size -> _gsl_vector_long_view;
  fun gsl_vector_long_swap: ptr[gsl_vector_long] * ptr[gsl_vector_long] -> int;
  fun gsl_vector_long_swap_elements: ptr[gsl_vector_long] * size * size -> int;
  fun gsl_vector_long_view_array: ptr[long] * size -> _gsl_vector_long_view;
  fun gsl_vector_long_view_array_with_stride: ptr[long] * size * size -> _gsl_vector_long_view;
}
