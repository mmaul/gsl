//Module        : gsl_cdf_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_cdf.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_CDF_H__
header '#include <gsl/gsl_cdf.h>';

class gsl_cdf_h
{
  open C_hack;

  //FUNCTIONS
  fun gsl_cdf_beta_P: double * double * double -> double;
  fun gsl_cdf_beta_Q: double * double * double -> double;
  fun gsl_cdf_cauchy_P: double * double -> double;
  fun gsl_cdf_cauchy_Pinv: double * double -> double;
  fun gsl_cdf_cauchy_Q: double * double -> double;
  fun gsl_cdf_cauchy_Qinv: double * double -> double;
  fun gsl_cdf_chisq_P: double * double -> double;
  fun gsl_cdf_chisq_Pinv: double * double -> double;
  fun gsl_cdf_chisq_Q: double * double -> double;
  fun gsl_cdf_chisq_Qinv: double * double -> double;
  fun gsl_cdf_exponential_P: double * double -> double;
  fun gsl_cdf_exponential_Pinv: double * double -> double;
  fun gsl_cdf_exponential_Q: double * double -> double;
  fun gsl_cdf_exponential_Qinv: double * double -> double;
  fun gsl_cdf_exppow_P: double * double * double -> double;
  fun gsl_cdf_exppow_Q: double * double * double -> double;
  fun gsl_cdf_fdist_P: double * double * double -> double;
  fun gsl_cdf_fdist_Q: double * double * double -> double;
  fun gsl_cdf_flat_P: double * double * double -> double;
  fun gsl_cdf_flat_Pinv: double * double * double -> double;
  fun gsl_cdf_flat_Q: double * double * double -> double;
  fun gsl_cdf_flat_Qinv: double * double * double -> double;
  fun gsl_cdf_gamma_P: double * double * double -> double;
  fun gsl_cdf_gamma_Pinv: double * double * double -> double;
  fun gsl_cdf_gamma_Q: double * double * double -> double;
  fun gsl_cdf_gamma_Qinv: double * double * double -> double;
  fun gsl_cdf_gaussian_P: double * double -> double;
  fun gsl_cdf_gaussian_Pinv: double * double -> double;
  fun gsl_cdf_gaussian_Q: double * double -> double;
  fun gsl_cdf_gaussian_Qinv: double * double -> double;
  fun gsl_cdf_gumbel1_P: double * double * double -> double;
  fun gsl_cdf_gumbel1_Pinv: double * double * double -> double;
  fun gsl_cdf_gumbel1_Q: double * double * double -> double;
  fun gsl_cdf_gumbel1_Qinv: double * double * double -> double;
  fun gsl_cdf_gumbel2_P: double * double * double -> double;
  fun gsl_cdf_gumbel2_Pinv: double * double * double -> double;
  fun gsl_cdf_gumbel2_Q: double * double * double -> double;
  fun gsl_cdf_gumbel2_Qinv: double * double * double -> double;
  fun gsl_cdf_laplace_P: double * double -> double;
  fun gsl_cdf_laplace_Pinv: double * double -> double;
  fun gsl_cdf_laplace_Q: double * double -> double;
  fun gsl_cdf_laplace_Qinv: double * double -> double;
  fun gsl_cdf_logistic_P: double * double -> double;
  fun gsl_cdf_logistic_Pinv: double * double -> double;
  fun gsl_cdf_logistic_Q: double * double -> double;
  fun gsl_cdf_logistic_Qinv: double * double -> double;
  fun gsl_cdf_lognormal_P: double * double * double -> double;
  fun gsl_cdf_lognormal_Pinv: double * double * double -> double;
  fun gsl_cdf_lognormal_Q: double * double * double -> double;
  fun gsl_cdf_lognormal_Qinv: double * double * double -> double;
  fun gsl_cdf_pareto_P: double * double * double -> double;
  fun gsl_cdf_pareto_Pinv: double * double * double -> double;
  fun gsl_cdf_pareto_Q: double * double * double -> double;
  fun gsl_cdf_pareto_Qinv: double * double * double -> double;
  fun gsl_cdf_rayleigh_P: double * double -> double;
  fun gsl_cdf_rayleigh_Pinv: double * double -> double;
  fun gsl_cdf_rayleigh_Q: double * double -> double;
  fun gsl_cdf_rayleigh_Qinv: double * double -> double;
  fun gsl_cdf_tdist_P: double * double -> double;
  fun gsl_cdf_tdist_Pinv: double * double -> double;
  fun gsl_cdf_tdist_Q: double * double -> double;
  fun gsl_cdf_tdist_Qinv: double * double -> double;
  fun gsl_cdf_ugaussian_P: double -> double;
  fun gsl_cdf_ugaussian_Pinv: double -> double;
  fun gsl_cdf_ugaussian_Q: double -> double;
  fun gsl_cdf_ugaussian_Qinv: double -> double;
  fun gsl_cdf_weibull_P: double * double * double -> double;
  fun gsl_cdf_weibull_Pinv: double * double * double -> double;
  fun gsl_cdf_weibull_Q: double * double * double -> double;
  fun gsl_cdf_weibull_Qinv: double * double * double -> double;
}
