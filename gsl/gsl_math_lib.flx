//Module        : gsl_math_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_math.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define GSL_FN_VEC_EVAL(F,x,y) (*((F)->function))(x,y,(F)->params)
//#define GSL_FN_FDF_EVAL_F_DF(FDF,x,y,dy) (*((FDF)->fdf))(x,(FDF)->params,(y),(dy))
//#define GSL_FN_FDF_EVAL_DF(FDF,x) (*((FDF)->df))(x,(FDF)->params)
//#define GSL_FN_FDF_EVAL_F(FDF,x) (*((FDF)->f))(x,(FDF)->params)
//#define GSL_FN_EVAL(F,x) (*((F)->function))(x,(F)->params)
//#define GSL_MIN_LDBL(a,b)  GSL_MIN(a,b)
//#define GSL_MAX_LDBL(a,b)  GSL_MAX(a,b)
//#define GSL_MIN_DBL(a,b)   GSL_MIN(a,b)
//#define GSL_MAX_DBL(a,b)   GSL_MAX(a,b)
//#define GSL_MIN_INT(a,b)   GSL_MIN(a,b)
//#define GSL_MAX_INT(a,b)   GSL_MAX(a,b)
//#define GSL_MIN(a,b) ((a) < (b) ? (a) : (b))
//#define GSL_MAX(a,b) ((a) > (b) ? (a) : (b))
//#define GSL_IS_REAL(x) (gsl_finite(x))
//#define GSL_SIGN(x)    ((x) >= 0.0 ? 1 : -1)
//#define GSL_IS_EVEN(n) (!(GSL_IS_ODD(n)))
//#define GSL_IS_ODD(n)  ((n) & 1)
//#define M_EULER    0.57721566490153286060651209008      /* Euler constant */
//#define M_LNPI     1.14472988584940017414342735135      /* ln(pi) */
//#define M_LN2      0.69314718055994530941723212146      /* ln(2) */
//#define M_LN10     2.30258509299404568401799145468      /* ln(10) */
//#define M_2_PI     0.63661977236758134307553505349      /* 2/pi */
//#define M_1_PI     0.31830988618379067153776752675      /* 1/pi */
//#define M_2_SQRTPI 1.12837916709551257389615890312      /* 2/sqrt(pi) */
//#define M_SQRTPI   1.77245385090551602729816748334      /* sqrt(pi) */
//#define M_PI_4     0.78539816339744830966156608458      /* pi/4 */
//#define M_PI_2     1.57079632679489661923132169164      /* pi/2 */
//#define M_PI       3.14159265358979323846264338328      /* pi */
//#define M_SQRT3    1.73205080756887729352744634151      /* sqrt(3) */
//#define M_SQRT1_2  0.70710678118654752440084436210      /* sqrt(1/2) */
//#define M_SQRT2    1.41421356237309504880168872421      /* sqrt(2) */
//#define M_LOG10E   0.43429448190325182765112891892      /* log_10 (e) */
//#define M_LOG2E    1.44269504088896340735992468100      /* log_2 (e) */
//#define M_E        2.71828182845904523536028747135      /* e */
//#define __GSL_MATH_H__
header '#include <gsl/gsl_math.h>';

//INCLUDES
include "gsl_function_fdf_struct_lib";
include "gsl_function_struct_lib";
include "gsl_function_vec_struct_lib";

class gsl_math_h
{
  open C_hack;
  open gsl_function_fdf_struct_h;
  open gsl_function_struct_h;
  open gsl_function_vec_struct_h;

  //CSTRUCTS
  cstruct gsl_function_struct {
    function: gsl_math_h_cft_1;
    params: address;
  }
  cstruct gsl_function_vec_struct {
    function: gsl_math_h_cft_3;
    params: address;
  }
  cstruct gsl_function_fdf_struct {
    f: gsl_math_h_cft_1;
    df: gsl_math_h_cft_1;
    fdf: gsl_math_h_cft_2;
    params: address;
  }

  //C FUNCTION POINTER TYPES
  header '''typedef void (*gsl_math_h_cft_2)(double, void *, double *,  double *);''';
  type gsl_math_h_cft_2 = 'gsl_math_h_cft_2';
  header '''typedef int (*gsl_math_h_cft_3)(double, double *, void *);''';
  type gsl_math_h_cft_3 = 'gsl_math_h_cft_3';
  header '''typedef double (*gsl_math_h_cft_1)(double, void *);''';
  type gsl_math_h_cft_1 = 'gsl_math_h_cft_1';

  //STRUCT or UNION TAG ALIASES
  typedef gsl_function = gsl_function_struct;
  typedef gsl_function_vec = gsl_function_vec_struct;
  typedef gsl_function_fdf = gsl_function_fdf_struct;

  //TYPE ALIASES
  typedef _struct_gsl_function_vec_struct = gsl_function_vec_struct;
  typedef _struct_gsl_function_struct = gsl_function_struct;
  typedef _struct_gsl_function_fdf_struct = gsl_function_fdf_struct;

  //FUNCTIONS
  fun gsl_max: double * double -> double;
  fun gsl_min: double * double -> double;
}
