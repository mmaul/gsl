//Module        : gsl_vector_ushort_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_vector_ushort.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_VECTOR_USHORT_H__
header '#include <gsl/gsl_vector_ushort.h>';

//INCLUDES
include "gsl_block_ushort_lib";

class gsl_vector_ushort_h
{
  open C_hack;
  open gsl_block_ushort_h;

  //ABSTRACT TYPES
  type _gsl_vector_ushort_view = '_gsl_vector_ushort_view';
  type _gsl_vector_ushort_const_view = '_gsl_vector_ushort_const_view';
  type gsl_vector_ushort = 'gsl_vector_ushort';

  //TYPE ALIASES
  typedef gsl_vector_ushort_const_view = _gsl_vector_ushort_const_view;
  typedef gsl_vector_ushort_view = _gsl_vector_ushort_view;

  //PROCEDURES
  proc gsl_vector_ushort_free: ptr[gsl_vector_ushort];
  proc gsl_vector_ushort_minmax: cptr[gsl_vector_ushort] * ptr[ushort] * ptr[ushort];
  proc gsl_vector_ushort_minmax_index: cptr[gsl_vector_ushort] * ptr[size] * ptr[size];
  proc gsl_vector_ushort_set: ptr[gsl_vector_ushort] * size * ushort;
  proc gsl_vector_ushort_set_all: ptr[gsl_vector_ushort] * ushort;
  proc gsl_vector_ushort_set_zero: ptr[gsl_vector_ushort];

  //FUNCTIONS
  fun gsl_vector_ushort_add: ptr[gsl_vector_ushort] * cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_add_constant: ptr[gsl_vector_ushort] * double -> int;
  fun gsl_vector_ushort_alloc: size -> ptr[gsl_vector_ushort];
  fun gsl_vector_ushort_alloc_from_block: ptr[gsl_block_ushort] * size * size * size -> ptr[gsl_vector_ushort];
  fun gsl_vector_ushort_alloc_from_vector: ptr[gsl_vector_ushort] * size * size * size -> ptr[gsl_vector_ushort];
  fun gsl_vector_ushort_calloc: size -> ptr[gsl_vector_ushort];
  fun gsl_vector_ushort_const_ptr: cptr[gsl_vector_ushort] * size -> cptr[ushort];
  fun gsl_vector_ushort_const_subvector: cptr[gsl_vector_ushort] * size * size -> _gsl_vector_ushort_const_view;
  fun gsl_vector_ushort_const_subvector_with_stride: cptr[gsl_vector_ushort] * size * size * size -> _gsl_vector_ushort_const_view;
  fun gsl_vector_ushort_const_view_array: cptr[ushort] * size -> _gsl_vector_ushort_const_view;
  fun gsl_vector_ushort_const_view_array_with_stride: cptr[ushort] * size * size -> _gsl_vector_ushort_const_view;
  fun gsl_vector_ushort_div: ptr[gsl_vector_ushort] * cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_fprintf: ptr[FILE] * cptr[gsl_vector_ushort] * cptr[char] -> int;
  fun gsl_vector_ushort_fread: ptr[FILE] * ptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_fscanf: ptr[FILE] * ptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_fwrite: ptr[FILE] * cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_get: cptr[gsl_vector_ushort] * size -> ushort;
  fun gsl_vector_ushort_isnull: cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_max: cptr[gsl_vector_ushort] -> ushort;
  fun gsl_vector_ushort_max_index: cptr[gsl_vector_ushort] -> size;
  fun gsl_vector_ushort_memcpy: ptr[gsl_vector_ushort] * cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_min: cptr[gsl_vector_ushort] -> ushort;
  fun gsl_vector_ushort_min_index: cptr[gsl_vector_ushort] -> size;
  fun gsl_vector_ushort_mul: ptr[gsl_vector_ushort] * cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_ptr: ptr[gsl_vector_ushort] * size -> ptr[ushort];
  fun gsl_vector_ushort_reverse: ptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_scale: ptr[gsl_vector_ushort] * double -> int;
  fun gsl_vector_ushort_set_basis: ptr[gsl_vector_ushort] * size -> int;
  fun gsl_vector_ushort_sub: ptr[gsl_vector_ushort] * cptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_subvector: ptr[gsl_vector_ushort] * size * size -> _gsl_vector_ushort_view;
  fun gsl_vector_ushort_subvector_with_stride: ptr[gsl_vector_ushort] * size * size * size -> _gsl_vector_ushort_view;
  fun gsl_vector_ushort_swap: ptr[gsl_vector_ushort] * ptr[gsl_vector_ushort] -> int;
  fun gsl_vector_ushort_swap_elements: ptr[gsl_vector_ushort] * size * size -> int;
  fun gsl_vector_ushort_view_array: ptr[ushort] * size -> _gsl_vector_ushort_view;
  fun gsl_vector_ushort_view_array_with_stride: ptr[ushort] * size * size -> _gsl_vector_ushort_view;
}
