//Module        : gsl_eigen_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_eigen.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_EIGEN_H__
header '#include <gsl/gsl_eigen.h>';

//INCLUDES
include "gsl_matrix_complex_double_lib";
include "gsl_matrix_double_lib";
include "gsl_vector_double_lib";

class gsl_eigen_h
{
  open C_hack;
  open gsl_matrix_complex_double_h;
  open gsl_matrix_double_h;
  open gsl_vector_double_h;

  //ABSTRACT TYPES
  type gsl_eigen_symmv_workspace = 'gsl_eigen_symmv_workspace';
  type gsl_eigen_herm_workspace = 'gsl_eigen_herm_workspace';
  type gsl_eigen_sort_t = 'gsl_eigen_sort_t';
  type gsl_eigen_symm_workspace = 'gsl_eigen_symm_workspace';
  type gsl_eigen_hermv_workspace = 'gsl_eigen_hermv_workspace';

  //ENUMERATION CONSTANTS
  const GSL_EIGEN_SORT_ABS_DESC: int = 'GSL_EIGEN_SORT_ABS_DESC';
  const GSL_EIGEN_SORT_VAL_DESC: int = 'GSL_EIGEN_SORT_VAL_DESC';
  const GSL_EIGEN_SORT_VAL_ASC: int = 'GSL_EIGEN_SORT_VAL_ASC';
  const GSL_EIGEN_SORT_ABS_ASC: int = 'GSL_EIGEN_SORT_ABS_ASC';

  //PROCEDURES
  proc gsl_eigen_herm_free: ptr[gsl_eigen_herm_workspace];
  proc gsl_eigen_hermv_free: ptr[gsl_eigen_hermv_workspace];
  proc gsl_eigen_symm_free: ptr[gsl_eigen_symm_workspace];
  proc gsl_eigen_symmv_free: ptr[gsl_eigen_symmv_workspace];

  //FUNCTIONS
  fun gsl_eigen_herm: ptr[gsl_matrix_complex] * ptr[gsl_vector] * ptr[gsl_eigen_herm_workspace] -> int;
  fun gsl_eigen_herm_alloc: size -> ptr[gsl_eigen_herm_workspace];
  fun gsl_eigen_hermv: ptr[gsl_matrix_complex] * ptr[gsl_vector] * ptr[gsl_matrix_complex] * ptr[gsl_eigen_hermv_workspace] -> int;
  fun gsl_eigen_hermv_alloc: size -> ptr[gsl_eigen_hermv_workspace];
  fun gsl_eigen_hermv_sort: ptr[gsl_vector] * ptr[gsl_matrix_complex] * gsl_eigen_sort_t -> int;
  fun gsl_eigen_invert_jacobi: cptr[gsl_matrix] * ptr[gsl_matrix] * uint -> int;
  fun gsl_eigen_jacobi: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_matrix] * uint * ptr[uint] -> int;
  fun gsl_eigen_symm: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_eigen_symm_workspace] -> int;
  fun gsl_eigen_symm_alloc: size -> ptr[gsl_eigen_symm_workspace];
  fun gsl_eigen_symmv: ptr[gsl_matrix] * ptr[gsl_vector] * ptr[gsl_matrix] * ptr[gsl_eigen_symmv_workspace] -> int;
  fun gsl_eigen_symmv_alloc: size -> ptr[gsl_eigen_symmv_workspace];
  fun gsl_eigen_symmv_sort: ptr[gsl_vector] * ptr[gsl_matrix] * gsl_eigen_sort_t -> int;
}
