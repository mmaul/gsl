//Module        : gsl_matrix_double_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_matrix_double.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_MATRIX_DOUBLE_H__
header '#include <gsl/gsl_matrix_double.h>';

//INCLUDES
include "gsl_block_double_lib";
include "gsl_vector_double_lib";

class gsl_matrix_double_h
{
  open C_hack;
  open gsl_block_double_h;
  open gsl_vector_double_h;

  //ABSTRACT TYPES
  type _gsl_matrix_const_view = '_gsl_matrix_const_view';
  type gsl_matrix = 'gsl_matrix';
  type _gsl_matrix_view = '_gsl_matrix_view';

  //TYPE ALIASES
  typedef gsl_matrix_const_view = _gsl_matrix_const_view;
  typedef gsl_matrix_view = _gsl_matrix_view;

  //PROCEDURES
  proc gsl_matrix_free: ptr[gsl_matrix];
  proc gsl_matrix_max_index: cptr[gsl_matrix] * ptr[size] * ptr[size];
  proc gsl_matrix_min_index: cptr[gsl_matrix] * ptr[size] * ptr[size];
  proc gsl_matrix_minmax: cptr[gsl_matrix] * ptr[double] * ptr[double];
  proc gsl_matrix_minmax_index: cptr[gsl_matrix] * ptr[size] * ptr[size] * ptr[size] * ptr[size];
  proc gsl_matrix_set: ptr[gsl_matrix] * size * size * double;
  proc gsl_matrix_set_all: ptr[gsl_matrix] * double;
  proc gsl_matrix_set_identity: ptr[gsl_matrix];
  proc gsl_matrix_set_zero: ptr[gsl_matrix];

  //FUNCTIONS
  fun gsl_matrix_add: ptr[gsl_matrix] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_add_constant: ptr[gsl_matrix] * double -> int;
  fun gsl_matrix_add_diagonal: ptr[gsl_matrix] * double -> int;
  fun gsl_matrix_alloc: size * size -> ptr[gsl_matrix];
  fun gsl_matrix_alloc_from_block: ptr[gsl_block] * size * size * size * size -> ptr[gsl_matrix];
  fun gsl_matrix_alloc_from_matrix: ptr[gsl_matrix] * size * size * size * size -> ptr[gsl_matrix];
  fun gsl_matrix_calloc: size * size -> ptr[gsl_matrix];
  fun gsl_matrix_column: ptr[gsl_matrix] * size -> _gsl_vector_view;
  fun gsl_matrix_const_column: cptr[gsl_matrix] * size -> _gsl_vector_const_view;
  fun gsl_matrix_const_diagonal: cptr[gsl_matrix] -> _gsl_vector_const_view;
  fun gsl_matrix_const_ptr: cptr[gsl_matrix] * size * size -> cptr[double];
  fun gsl_matrix_const_row: cptr[gsl_matrix] * size -> _gsl_vector_const_view;
  fun gsl_matrix_const_subdiagonal: cptr[gsl_matrix] * size -> _gsl_vector_const_view;
  fun gsl_matrix_const_submatrix: cptr[gsl_matrix] * size * size * size * size -> _gsl_matrix_const_view;
  fun gsl_matrix_const_superdiagonal: cptr[gsl_matrix] * size -> _gsl_vector_const_view;
  fun gsl_matrix_const_view_array: cptr[double] * size * size -> _gsl_matrix_const_view;
  fun gsl_matrix_const_view_array_with_tda: cptr[double] * size * size * size -> _gsl_matrix_const_view;
  fun gsl_matrix_const_view_vector: cptr[gsl_vector] * size * size -> _gsl_matrix_const_view;
  fun gsl_matrix_const_view_vector_with_tda: cptr[gsl_vector] * size * size * size -> _gsl_matrix_const_view;
  fun gsl_matrix_diagonal: ptr[gsl_matrix] -> _gsl_vector_view;
  fun gsl_matrix_div_elements: ptr[gsl_matrix] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_fprintf: ptr[FILE] * cptr[gsl_matrix] * cptr[char] -> int;
  fun gsl_matrix_fread: ptr[FILE] * ptr[gsl_matrix] -> int;
  fun gsl_matrix_fscanf: ptr[FILE] * ptr[gsl_matrix] -> int;
  fun gsl_matrix_fwrite: ptr[FILE] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_get: cptr[gsl_matrix] * size * size -> double;
  fun gsl_matrix_get_col: ptr[gsl_vector] * cptr[gsl_matrix] * size -> int;
  fun gsl_matrix_get_row: ptr[gsl_vector] * cptr[gsl_matrix] * size -> int;
  fun gsl_matrix_isnull: cptr[gsl_matrix] -> int;
  fun gsl_matrix_max: cptr[gsl_matrix] -> double;
  fun gsl_matrix_memcpy: ptr[gsl_matrix] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_min: cptr[gsl_matrix] -> double;
  fun gsl_matrix_mul_elements: ptr[gsl_matrix] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_ptr: ptr[gsl_matrix] * size * size -> ptr[double];
  fun gsl_matrix_row: ptr[gsl_matrix] * size -> _gsl_vector_view;
  fun gsl_matrix_scale: ptr[gsl_matrix] * double -> int;
  fun gsl_matrix_set_col: ptr[gsl_matrix] * size * cptr[gsl_vector] -> int;
  fun gsl_matrix_set_row: ptr[gsl_matrix] * size * cptr[gsl_vector] -> int;
  fun gsl_matrix_sub: ptr[gsl_matrix] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_subdiagonal: ptr[gsl_matrix] * size -> _gsl_vector_view;
  fun gsl_matrix_submatrix: ptr[gsl_matrix] * size * size * size * size -> _gsl_matrix_view;
  fun gsl_matrix_superdiagonal: ptr[gsl_matrix] * size -> _gsl_vector_view;
  fun gsl_matrix_swap: ptr[gsl_matrix] * ptr[gsl_matrix] -> int;
  fun gsl_matrix_swap_columns: ptr[gsl_matrix] * size * size -> int;
  fun gsl_matrix_swap_rowcol: ptr[gsl_matrix] * size * size -> int;
  fun gsl_matrix_swap_rows: ptr[gsl_matrix] * size * size -> int;
  fun gsl_matrix_transpose: ptr[gsl_matrix] -> int;
  fun gsl_matrix_transpose_memcpy: ptr[gsl_matrix] * cptr[gsl_matrix] -> int;
  fun gsl_matrix_view_array: ptr[double] * size * size -> _gsl_matrix_view;
  fun gsl_matrix_view_array_with_tda: ptr[double] * size * size * size -> _gsl_matrix_view;
  fun gsl_matrix_view_vector: ptr[gsl_vector] * size * size -> _gsl_matrix_view;
  fun gsl_matrix_view_vector_with_tda: ptr[gsl_vector] * size * size * size -> _gsl_matrix_view;
  fun gsl_vector_alloc_col_from_matrix: ptr[gsl_matrix] * size -> ptr[gsl_vector];
  fun gsl_vector_alloc_row_from_matrix: ptr[gsl_matrix] * size -> ptr[gsl_vector];
}
