//Module        : gsl_matrix_uchar_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_matrix_uchar.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_MATRIX_UCHAR_H__
header '#include <gsl/gsl_matrix_uchar.h>';

//INCLUDES
include "gsl_block_uchar_lib";
include "gsl_vector_uchar_lib";

class gsl_matrix_uchar_h
{
  open C_hack;
  open gsl_block_uchar_h;
  open gsl_vector_uchar_h;

  //ABSTRACT TYPES
  type gsl_matrix_uchar = 'gsl_matrix_uchar';
  type _gsl_matrix_uchar_const_view = '_gsl_matrix_uchar_const_view';
  type _gsl_matrix_uchar_view = '_gsl_matrix_uchar_view';

  //TYPE ALIASES
  typedef gsl_matrix_uchar_const_view = _gsl_matrix_uchar_const_view;
  typedef gsl_matrix_uchar_view = _gsl_matrix_uchar_view;

  //PROCEDURES
  proc gsl_matrix_uchar_free: ptr[gsl_matrix_uchar];
  proc gsl_matrix_uchar_max_index: cptr[gsl_matrix_uchar] * ptr[size] * ptr[size];
  proc gsl_matrix_uchar_min_index: cptr[gsl_matrix_uchar] * ptr[size] * ptr[size];
  proc gsl_matrix_uchar_minmax: cptr[gsl_matrix_uchar] * ptr[utiny] * ptr[utiny];
  proc gsl_matrix_uchar_minmax_index: cptr[gsl_matrix_uchar] * ptr[size] * ptr[size] * ptr[size] * ptr[size];
  proc gsl_matrix_uchar_set: ptr[gsl_matrix_uchar] * size * size * utiny;
  proc gsl_matrix_uchar_set_all: ptr[gsl_matrix_uchar] * utiny;
  proc gsl_matrix_uchar_set_identity: ptr[gsl_matrix_uchar];
  proc gsl_matrix_uchar_set_zero: ptr[gsl_matrix_uchar];

  //FUNCTIONS
  fun gsl_matrix_uchar_add: ptr[gsl_matrix_uchar] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_add_constant: ptr[gsl_matrix_uchar] * double -> int;
  fun gsl_matrix_uchar_add_diagonal: ptr[gsl_matrix_uchar] * double -> int;
  fun gsl_matrix_uchar_alloc: size * size -> ptr[gsl_matrix_uchar];
  fun gsl_matrix_uchar_alloc_from_block: ptr[gsl_block_uchar] * size * size * size * size -> ptr[gsl_matrix_uchar];
  fun gsl_matrix_uchar_alloc_from_matrix: ptr[gsl_matrix_uchar] * size * size * size * size -> ptr[gsl_matrix_uchar];
  fun gsl_matrix_uchar_calloc: size * size -> ptr[gsl_matrix_uchar];
  fun gsl_matrix_uchar_column: ptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_view;
  fun gsl_matrix_uchar_const_column: cptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_const_view;
  fun gsl_matrix_uchar_const_diagonal: cptr[gsl_matrix_uchar] -> _gsl_vector_uchar_const_view;
  fun gsl_matrix_uchar_const_ptr: cptr[gsl_matrix_uchar] * size * size -> cptr[utiny];
  fun gsl_matrix_uchar_const_row: cptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_const_view;
  fun gsl_matrix_uchar_const_subdiagonal: cptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_const_view;
  fun gsl_matrix_uchar_const_submatrix: cptr[gsl_matrix_uchar] * size * size * size * size -> _gsl_matrix_uchar_const_view;
  fun gsl_matrix_uchar_const_superdiagonal: cptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_const_view;
  fun gsl_matrix_uchar_const_view_array: cptr[utiny] * size * size -> _gsl_matrix_uchar_const_view;
  fun gsl_matrix_uchar_const_view_array_with_tda: cptr[utiny] * size * size * size -> _gsl_matrix_uchar_const_view;
  fun gsl_matrix_uchar_const_view_vector: cptr[gsl_vector_uchar] * size * size -> _gsl_matrix_uchar_const_view;
  fun gsl_matrix_uchar_const_view_vector_with_tda: cptr[gsl_vector_uchar] * size * size * size -> _gsl_matrix_uchar_const_view;
  fun gsl_matrix_uchar_diagonal: ptr[gsl_matrix_uchar] -> _gsl_vector_uchar_view;
  fun gsl_matrix_uchar_div_elements: ptr[gsl_matrix_uchar] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_fprintf: ptr[FILE] * cptr[gsl_matrix_uchar] * cptr[char] -> int;
  fun gsl_matrix_uchar_fread: ptr[FILE] * ptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_fscanf: ptr[FILE] * ptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_fwrite: ptr[FILE] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_get: cptr[gsl_matrix_uchar] * size * size -> utiny;
  fun gsl_matrix_uchar_get_col: ptr[gsl_vector_uchar] * cptr[gsl_matrix_uchar] * size -> int;
  fun gsl_matrix_uchar_get_row: ptr[gsl_vector_uchar] * cptr[gsl_matrix_uchar] * size -> int;
  fun gsl_matrix_uchar_isnull: cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_max: cptr[gsl_matrix_uchar] -> utiny;
  fun gsl_matrix_uchar_memcpy: ptr[gsl_matrix_uchar] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_min: cptr[gsl_matrix_uchar] -> utiny;
  fun gsl_matrix_uchar_mul_elements: ptr[gsl_matrix_uchar] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_ptr: ptr[gsl_matrix_uchar] * size * size -> ptr[utiny];
  fun gsl_matrix_uchar_row: ptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_view;
  fun gsl_matrix_uchar_scale: ptr[gsl_matrix_uchar] * double -> int;
  fun gsl_matrix_uchar_set_col: ptr[gsl_matrix_uchar] * size * cptr[gsl_vector_uchar] -> int;
  fun gsl_matrix_uchar_set_row: ptr[gsl_matrix_uchar] * size * cptr[gsl_vector_uchar] -> int;
  fun gsl_matrix_uchar_sub: ptr[gsl_matrix_uchar] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_subdiagonal: ptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_view;
  fun gsl_matrix_uchar_submatrix: ptr[gsl_matrix_uchar] * size * size * size * size -> _gsl_matrix_uchar_view;
  fun gsl_matrix_uchar_superdiagonal: ptr[gsl_matrix_uchar] * size -> _gsl_vector_uchar_view;
  fun gsl_matrix_uchar_swap: ptr[gsl_matrix_uchar] * ptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_swap_columns: ptr[gsl_matrix_uchar] * size * size -> int;
  fun gsl_matrix_uchar_swap_rowcol: ptr[gsl_matrix_uchar] * size * size -> int;
  fun gsl_matrix_uchar_swap_rows: ptr[gsl_matrix_uchar] * size * size -> int;
  fun gsl_matrix_uchar_transpose: ptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_transpose_memcpy: ptr[gsl_matrix_uchar] * cptr[gsl_matrix_uchar] -> int;
  fun gsl_matrix_uchar_view_array: ptr[utiny] * size * size -> _gsl_matrix_uchar_view;
  fun gsl_matrix_uchar_view_array_with_tda: ptr[utiny] * size * size * size -> _gsl_matrix_uchar_view;
  fun gsl_matrix_uchar_view_vector: ptr[gsl_vector_uchar] * size * size -> _gsl_matrix_uchar_view;
  fun gsl_matrix_uchar_view_vector_with_tda: ptr[gsl_vector_uchar] * size * size * size -> _gsl_matrix_uchar_view;
  fun gsl_vector_uchar_alloc_col_from_matrix: ptr[gsl_matrix_uchar] * size -> ptr[gsl_vector_uchar];
  fun gsl_vector_uchar_alloc_row_from_matrix: ptr[gsl_matrix_uchar] * size -> ptr[gsl_vector_uchar];
}
