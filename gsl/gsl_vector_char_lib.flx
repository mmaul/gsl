//Module        : gsl_vector_char_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_vector_char.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_VECTOR_CHAR_H__
header '#include <gsl/gsl_vector_char.h>';

//INCLUDES
include "gsl_block_char_lib";

class gsl_vector_char_h
{
  open C_hack;
  open gsl_block_char_h;

  //ABSTRACT TYPES
  type _gsl_vector_char_const_view = '_gsl_vector_char_const_view';
  type gsl_vector_char = 'gsl_vector_char';
  type _gsl_vector_char_view = '_gsl_vector_char_view';

  //TYPE ALIASES
  typedef gsl_vector_char_view = _gsl_vector_char_view;
  typedef gsl_vector_char_const_view = _gsl_vector_char_const_view;

  //PROCEDURES
  proc gsl_vector_char_free: ptr[gsl_vector_char];
  proc gsl_vector_char_minmax: cptr[gsl_vector_char] * ptr[char] * ptr[char];
  proc gsl_vector_char_minmax_index: cptr[gsl_vector_char] * ptr[size] * ptr[size];
  proc gsl_vector_char_set: ptr[gsl_vector_char] * size * char;
  proc gsl_vector_char_set_all: ptr[gsl_vector_char] * char;
  proc gsl_vector_char_set_zero: ptr[gsl_vector_char];

  //FUNCTIONS
  fun gsl_vector_char_add: ptr[gsl_vector_char] * cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_add_constant: ptr[gsl_vector_char] * double -> int;
  fun gsl_vector_char_alloc: size -> ptr[gsl_vector_char];
  fun gsl_vector_char_alloc_from_block: ptr[gsl_block_char] * size * size * size -> ptr[gsl_vector_char];
  fun gsl_vector_char_alloc_from_vector: ptr[gsl_vector_char] * size * size * size -> ptr[gsl_vector_char];
  fun gsl_vector_char_calloc: size -> ptr[gsl_vector_char];
  fun gsl_vector_char_const_ptr: cptr[gsl_vector_char] * size -> cptr[char];
  fun gsl_vector_char_const_subvector: cptr[gsl_vector_char] * size * size -> _gsl_vector_char_const_view;
  fun gsl_vector_char_const_subvector_with_stride: cptr[gsl_vector_char] * size * size * size -> _gsl_vector_char_const_view;
  fun gsl_vector_char_const_view_array: cptr[char] * size -> _gsl_vector_char_const_view;
  fun gsl_vector_char_const_view_array_with_stride: cptr[char] * size * size -> _gsl_vector_char_const_view;
  fun gsl_vector_char_div: ptr[gsl_vector_char] * cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_fprintf: ptr[FILE] * cptr[gsl_vector_char] * cptr[char] -> int;
  fun gsl_vector_char_fread: ptr[FILE] * ptr[gsl_vector_char] -> int;
  fun gsl_vector_char_fscanf: ptr[FILE] * ptr[gsl_vector_char] -> int;
  fun gsl_vector_char_fwrite: ptr[FILE] * cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_get: cptr[gsl_vector_char] * size -> char;
  fun gsl_vector_char_isnull: cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_max: cptr[gsl_vector_char] -> char;
  fun gsl_vector_char_max_index: cptr[gsl_vector_char] -> size;
  fun gsl_vector_char_memcpy: ptr[gsl_vector_char] * cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_min: cptr[gsl_vector_char] -> char;
  fun gsl_vector_char_min_index: cptr[gsl_vector_char] -> size;
  fun gsl_vector_char_mul: ptr[gsl_vector_char] * cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_ptr: ptr[gsl_vector_char] * size -> ptr[char];
  fun gsl_vector_char_reverse: ptr[gsl_vector_char] -> int;
  fun gsl_vector_char_scale: ptr[gsl_vector_char] * double -> int;
  fun gsl_vector_char_set_basis: ptr[gsl_vector_char] * size -> int;
  fun gsl_vector_char_sub: ptr[gsl_vector_char] * cptr[gsl_vector_char] -> int;
  fun gsl_vector_char_subvector: ptr[gsl_vector_char] * size * size -> _gsl_vector_char_view;
  fun gsl_vector_char_subvector_with_stride: ptr[gsl_vector_char] * size * size * size -> _gsl_vector_char_view;
  fun gsl_vector_char_swap: ptr[gsl_vector_char] * ptr[gsl_vector_char] -> int;
  fun gsl_vector_char_swap_elements: ptr[gsl_vector_char] * size * size -> int;
  fun gsl_vector_char_view_array: ptr[char] * size -> _gsl_vector_char_view;
  fun gsl_vector_char_view_array_with_stride: ptr[char] * size * size -> _gsl_vector_char_view;
}
