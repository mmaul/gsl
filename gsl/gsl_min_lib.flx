//Module        : gsl_min_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_min.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_MIN_H__
header '#include <gsl/gsl_min.h>';

//INCLUDES
include "gsl_math_lib";

class gsl_min_h
{
  open C_hack;
  open gsl_math_h;

  //ABSTRACT TYPES
  type gsl_min_fminimizer = 'gsl_min_fminimizer';
  type gsl_min_fminimizer_type = 'gsl_min_fminimizer_type';

  //C FUNCTION POINTER TYPES
  header '''typedef int (*gsl_min_h_cft_1)(gsl_function *, double *,  double *, double *, double *,  double *, double *, size_t);''';
  type gsl_min_h_cft_1 = 'gsl_min_h_cft_1';

  //TYPE ALIASES
  typedef gsl_min_bracketing_function = gsl_min_h_cft_1;

  //VARIABLES
  const gsl_min_fminimizer_brent: cptr[gsl_min_fminimizer_type] = 'gsl_min_fminimizer_brent';
  const gsl_min_fminimizer_goldensection: cptr[gsl_min_fminimizer_type] = 'gsl_min_fminimizer_goldensection';

  //PROCEDURES
  proc gsl_min_fminimizer_free: ptr[gsl_min_fminimizer];

  //FUNCTIONS
  fun gsl_min_find_bracket: ptr[gsl_function] * ptr[double] * ptr[double] * ptr[double] * ptr[double] * ptr[double] * ptr[double] * size -> int;
  fun gsl_min_fminimizer_alloc: cptr[gsl_min_fminimizer_type] -> ptr[gsl_min_fminimizer];
  fun gsl_min_fminimizer_f_lower: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_fminimizer_f_minimum: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_fminimizer_f_upper: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_fminimizer_iterate: ptr[gsl_min_fminimizer] -> int;
  fun gsl_min_fminimizer_minimum: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_fminimizer_name: cptr[gsl_min_fminimizer] -> cptr[char];
  fun gsl_min_fminimizer_set: ptr[gsl_min_fminimizer] * ptr[gsl_function] * double * double * double -> int;
  fun gsl_min_fminimizer_set_with_values: ptr[gsl_min_fminimizer] * ptr[gsl_function] * double * double * double * double * double * double -> int;
  fun gsl_min_fminimizer_x_lower: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_fminimizer_x_minimum: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_fminimizer_x_upper: cptr[gsl_min_fminimizer] -> double;
  fun gsl_min_test_interval: double * double * double * double -> int;
}
