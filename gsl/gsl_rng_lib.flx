//Module        : gsl_rng_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_rng.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
requires package "gsl";
include 'std';

//#define __GSL_RNG_H__
header '#include <gsl/gsl_rng.h>';

//INCLUDES

class gsl_rng_h
{
  open C_hack;

  //ABSTRACT TYPES
  type gsl_rng_type = 'gsl_rng_type';
  type gsl_rng = 'gsl_rng';

  //VARIABLES
  const gsl_rng_mrg: cptr[gsl_rng_type] = 'gsl_rng_mrg';
  const gsl_rng_uni: cptr[gsl_rng_type] = 'gsl_rng_uni';
  const gsl_rng_random32_libc5: cptr[gsl_rng_type] = 'gsl_rng_random32_libc5';
  const gsl_rng_random64_bsd: cptr[gsl_rng_type] = 'gsl_rng_random64_bsd';
  const gsl_rng_random128_glibc2: cptr[gsl_rng_type] = 'gsl_rng_random128_glibc2';
  const gsl_rng_random128_libc5: cptr[gsl_rng_type] = 'gsl_rng_random128_libc5';
  const gsl_rng_fishman18: cptr[gsl_rng_type] = 'gsl_rng_fishman18';
  const gsl_rng_slatec: cptr[gsl_rng_type] = 'gsl_rng_slatec';
  const gsl_rng_ranlxs0: cptr[gsl_rng_type] = 'gsl_rng_ranlxs0';
  const gsl_rng_ranlxs1: cptr[gsl_rng_type] = 'gsl_rng_ranlxs1';
  const gsl_rng_coveyou: cptr[gsl_rng_type] = 'gsl_rng_coveyou';
  const gsl_rng_ranlxs2: cptr[gsl_rng_type] = 'gsl_rng_ranlxs2';
  const gsl_rng_mt19937: cptr[gsl_rng_type] = 'gsl_rng_mt19937';
  const gsl_rng_ranlxd1: cptr[gsl_rng_type] = 'gsl_rng_ranlxd1';
  const gsl_rng_ranlxd2: cptr[gsl_rng_type] = 'gsl_rng_ranlxd2';
  const gsl_rng_ranmar: cptr[gsl_rng_type] = 'gsl_rng_ranmar';
  const gsl_rng_fishman20: cptr[gsl_rng_type] = 'gsl_rng_fishman20';
  const gsl_rng_borosh13: cptr[gsl_rng_type] = 'gsl_rng_borosh13';
  const gsl_rng_random256_glibc2: cptr[gsl_rng_type] = 'gsl_rng_random256_glibc2';
  const gsl_rng_r250: cptr[gsl_rng_type] = 'gsl_rng_r250';
  const gsl_rng_minstd: cptr[gsl_rng_type] = 'gsl_rng_minstd';
  const gsl_rng_knuthran2: cptr[gsl_rng_type] = 'gsl_rng_knuthran2';
  const gsl_rng_random256_libc5: cptr[gsl_rng_type] = 'gsl_rng_random256_libc5';
  const gsl_rng_taus2: cptr[gsl_rng_type] = 'gsl_rng_taus2';
  const gsl_rng_rand48: cptr[gsl_rng_type] = 'gsl_rng_rand48';
  const gsl_rng_ran0: cptr[gsl_rng_type] = 'gsl_rng_ran0';
  const gsl_rng_ran1: cptr[gsl_rng_type] = 'gsl_rng_ran1';
  const gsl_rng_vax: cptr[gsl_rng_type] = 'gsl_rng_vax';
  const gsl_rng_random128_bsd: cptr[gsl_rng_type] = 'gsl_rng_random128_bsd';
  const gsl_rng_ran2: cptr[gsl_rng_type] = 'gsl_rng_ran2';
  const gsl_rng_ran3: cptr[gsl_rng_type] = 'gsl_rng_ran3';
  const gsl_rng_random8_bsd: cptr[gsl_rng_type] = 'gsl_rng_random8_bsd';
  const gsl_rng_ranlux: cptr[gsl_rng_type] = 'gsl_rng_ranlux';
  const gsl_rng_gfsr4: cptr[gsl_rng_type] = 'gsl_rng_gfsr4';
  const gsl_rng_lecuyer21: cptr[gsl_rng_type] = 'gsl_rng_lecuyer21';
  const gsl_rng_random8_glibc2: cptr[gsl_rng_type] = 'gsl_rng_random8_glibc2';
  const gsl_rng_random8_libc5: cptr[gsl_rng_type] = 'gsl_rng_random8_libc5';
  const gsl_rng_ranlux389: cptr[gsl_rng_type] = 'gsl_rng_ranlux389';
  const gsl_rng_tt800: cptr[gsl_rng_type] = 'gsl_rng_tt800';
  const gsl_rng_random32_bsd: cptr[gsl_rng_type] = 'gsl_rng_random32_bsd';
  const gsl_rng_cmrg: cptr[gsl_rng_type] = 'gsl_rng_cmrg';
  const gsl_rng_default: cptr[gsl_rng_type] = 'gsl_rng_default';
  const gsl_rng_taus113: cptr[gsl_rng_type] = 'gsl_rng_taus113';
  const gsl_rng_random64_glibc2: cptr[gsl_rng_type] = 'gsl_rng_random64_glibc2';
  const gsl_rng_waterman14: cptr[gsl_rng_type] = 'gsl_rng_waterman14';
  const gsl_rng_random256_bsd: cptr[gsl_rng_type] = 'gsl_rng_random256_bsd';
  const gsl_rng_random_bsd: cptr[gsl_rng_type] = 'gsl_rng_random_bsd';
  const gsl_rng_random_glibc2: cptr[gsl_rng_type] = 'gsl_rng_random_glibc2';
  const gsl_rng_taus: cptr[gsl_rng_type] = 'gsl_rng_taus';
  const gsl_rng_uni32: cptr[gsl_rng_type] = 'gsl_rng_uni32';
  const gsl_rng_rand: cptr[gsl_rng_type] = 'gsl_rng_rand';
  const gsl_rng_knuthran: cptr[gsl_rng_type] = 'gsl_rng_knuthran';
  const gsl_rng_ranf: cptr[gsl_rng_type] = 'gsl_rng_ranf';
  const gsl_rng_default_seed: ulong = 'gsl_rng_default_seed';
  const gsl_rng_random64_libc5: cptr[gsl_rng_type] = 'gsl_rng_random64_libc5';
  const gsl_rng_mt19937_1998: cptr[gsl_rng_type] = 'gsl_rng_mt19937_1998';
  const gsl_rng_random32_glibc2: cptr[gsl_rng_type] = 'gsl_rng_random32_glibc2';
  const gsl_rng_mt19937_1999: cptr[gsl_rng_type] = 'gsl_rng_mt19937_1999';
  const gsl_rng_fishman2x: cptr[gsl_rng_type] = 'gsl_rng_fishman2x';
  const gsl_rng_transputer: cptr[gsl_rng_type] = 'gsl_rng_transputer';
  const gsl_rng_randu: cptr[gsl_rng_type] = 'gsl_rng_randu';
  const gsl_rng_zuf: cptr[gsl_rng_type] = 'gsl_rng_zuf';
  const gsl_rng_random_libc5: cptr[gsl_rng_type] = 'gsl_rng_random_libc5';

  //PROCEDURES
  proc gsl_rng_free: ptr[gsl_rng];
  proc gsl_rng_print_state: cptr[gsl_rng];
  proc gsl_rng_set: cptr[gsl_rng] * ulong;

  //FUNCTIONS
  fun gsl_rng_alloc: cptr[gsl_rng_type] -> ptr[gsl_rng];
  fun gsl_rng_clone: cptr[gsl_rng] -> ptr[gsl_rng];
  fun gsl_rng_env_setup: 1 -> cptr[gsl_rng_type];
  fun gsl_rng_fread: ptr[FILE] * ptr[gsl_rng] -> int;
  fun gsl_rng_fwrite: ptr[FILE] * cptr[gsl_rng] -> int;
  fun gsl_rng_get: cptr[gsl_rng] -> ulong;
  fun gsl_rng_max: cptr[gsl_rng] -> ulong;
  fun gsl_rng_memcpy: ptr[gsl_rng] * cptr[gsl_rng] -> int;
  fun gsl_rng_min: cptr[gsl_rng] -> ulong;
  fun gsl_rng_name: cptr[gsl_rng] -> cptr[char];
  fun gsl_rng_size: cptr[gsl_rng] -> size;
  fun gsl_rng_state: cptr[gsl_rng] -> address;
  fun gsl_rng_types_setup: 1 -> ptr[cptr[gsl_rng_type]];
  fun gsl_rng_uniform: cptr[gsl_rng] -> double;
  fun gsl_rng_uniform_int: cptr[gsl_rng] * ulong -> ulong;
  fun gsl_rng_uniform_pos: cptr[gsl_rng] -> double;
}
