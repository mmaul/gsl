//Module        : gsl_matrix_complex_float_h
//Timestamp     : 2006/3/29 3:52:26 UTC
//Timestamp     : 2006/3/29 14:52:26 (local)
//Raw Header    : gsl_matrix_complex_float.h
//Preprocessor  : gcc -E
//Input file: gsl.flxcc.i
//Flxcc Control : gsl.flxcc
//Felix Version : 1.1.2_rc7
include 'std';

//#define __GSL_MATRIX_COMPLEX_FLOAT_H__
header '#include <gsl/gsl_matrix_complex_float.h>';

//INCLUDES
include "gsl_block_complex_float_lib";
include "gsl_complex_lib";
include "gsl_vector_complex_float_lib";

class gsl_matrix_complex_float_h
{
  open C_hack;
  open gsl_block_complex_float_h;
  open gsl_complex_h;
  open gsl_vector_complex_float_h;

  //ABSTRACT TYPES
  type gsl_matrix_complex_float = 'gsl_matrix_complex_float';
  type _gsl_matrix_complex_float_const_view = '_gsl_matrix_complex_float_const_view';
  type _gsl_matrix_complex_float_view = '_gsl_matrix_complex_float_view';

  //TYPE ALIASES
  typedef gsl_matrix_complex_float_view = _gsl_matrix_complex_float_view;
  typedef gsl_matrix_complex_float_const_view = _gsl_matrix_complex_float_const_view;

  //PROCEDURES
  proc gsl_matrix_complex_float_free: ptr[gsl_matrix_complex_float];
  proc gsl_matrix_complex_float_set: ptr[gsl_matrix_complex_float] * size * size * gsl_complex_float;
  proc gsl_matrix_complex_float_set_all: ptr[gsl_matrix_complex_float] * gsl_complex_float;
  proc gsl_matrix_complex_float_set_identity: ptr[gsl_matrix_complex_float];
  proc gsl_matrix_complex_float_set_zero: ptr[gsl_matrix_complex_float];

  //FUNCTIONS
  fun gsl_matrix_complex_float_add: ptr[gsl_matrix_complex_float] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_add_constant: ptr[gsl_matrix_complex_float] * gsl_complex_float -> int;
  fun gsl_matrix_complex_float_add_diagonal: ptr[gsl_matrix_complex_float] * gsl_complex_float -> int;
  fun gsl_matrix_complex_float_alloc: size * size -> ptr[gsl_matrix_complex_float];
  fun gsl_matrix_complex_float_alloc_from_block: ptr[gsl_block_complex_float] * size * size * size * size -> ptr[gsl_matrix_complex_float];
  fun gsl_matrix_complex_float_alloc_from_matrix: ptr[gsl_matrix_complex_float] * size * size * size * size -> ptr[gsl_matrix_complex_float];
  fun gsl_matrix_complex_float_calloc: size * size -> ptr[gsl_matrix_complex_float];
  fun gsl_matrix_complex_float_column: ptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_view;
  fun gsl_matrix_complex_float_const_column: cptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_const_view;
  fun gsl_matrix_complex_float_const_diagonal: cptr[gsl_matrix_complex_float] -> _gsl_vector_complex_float_const_view;
  fun gsl_matrix_complex_float_const_ptr: cptr[gsl_matrix_complex_float] * size * size -> cptr[gsl_complex_float];
  fun gsl_matrix_complex_float_const_row: cptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_const_view;
  fun gsl_matrix_complex_float_const_subdiagonal: cptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_const_view;
  fun gsl_matrix_complex_float_const_submatrix: cptr[gsl_matrix_complex_float] * size * size * size * size -> _gsl_matrix_complex_float_const_view;
  fun gsl_matrix_complex_float_const_superdiagonal: cptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_const_view;
  fun gsl_matrix_complex_float_const_view_array: cptr[float] * size * size -> _gsl_matrix_complex_float_const_view;
  fun gsl_matrix_complex_float_const_view_array_with_tda: cptr[float] * size * size * size -> _gsl_matrix_complex_float_const_view;
  fun gsl_matrix_complex_float_const_view_vector: cptr[gsl_vector_complex_float] * size * size -> _gsl_matrix_complex_float_const_view;
  fun gsl_matrix_complex_float_const_view_vector_with_tda: cptr[gsl_vector_complex_float] * size * size * size -> _gsl_matrix_complex_float_const_view;
  fun gsl_matrix_complex_float_diagonal: ptr[gsl_matrix_complex_float] -> _gsl_vector_complex_float_view;
  fun gsl_matrix_complex_float_div_elements: ptr[gsl_matrix_complex_float] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_fprintf: ptr[FILE] * cptr[gsl_matrix_complex_float] * cptr[char] -> int;
  fun gsl_matrix_complex_float_fread: ptr[FILE] * ptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_fscanf: ptr[FILE] * ptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_fwrite: ptr[FILE] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_get: cptr[gsl_matrix_complex_float] * size * size -> gsl_complex_float;
  fun gsl_matrix_complex_float_get_col: ptr[gsl_vector_complex_float] * cptr[gsl_matrix_complex_float] * size -> int;
  fun gsl_matrix_complex_float_get_row: ptr[gsl_vector_complex_float] * cptr[gsl_matrix_complex_float] * size -> int;
  fun gsl_matrix_complex_float_isnull: cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_memcpy: ptr[gsl_matrix_complex_float] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_mul_elements: ptr[gsl_matrix_complex_float] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_ptr: ptr[gsl_matrix_complex_float] * size * size -> ptr[gsl_complex_float];
  fun gsl_matrix_complex_float_row: ptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_view;
  fun gsl_matrix_complex_float_scale: ptr[gsl_matrix_complex_float] * gsl_complex_float -> int;
  fun gsl_matrix_complex_float_set_col: ptr[gsl_matrix_complex_float] * size * cptr[gsl_vector_complex_float] -> int;
  fun gsl_matrix_complex_float_set_row: ptr[gsl_matrix_complex_float] * size * cptr[gsl_vector_complex_float] -> int;
  fun gsl_matrix_complex_float_sub: ptr[gsl_matrix_complex_float] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_subdiagonal: ptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_view;
  fun gsl_matrix_complex_float_submatrix: ptr[gsl_matrix_complex_float] * size * size * size * size -> _gsl_matrix_complex_float_view;
  fun gsl_matrix_complex_float_superdiagonal: ptr[gsl_matrix_complex_float] * size -> _gsl_vector_complex_float_view;
  fun gsl_matrix_complex_float_swap: ptr[gsl_matrix_complex_float] * ptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_swap_columns: ptr[gsl_matrix_complex_float] * size * size -> int;
  fun gsl_matrix_complex_float_swap_rowcol: ptr[gsl_matrix_complex_float] * size * size -> int;
  fun gsl_matrix_complex_float_swap_rows: ptr[gsl_matrix_complex_float] * size * size -> int;
  fun gsl_matrix_complex_float_transpose: ptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_transpose_memcpy: ptr[gsl_matrix_complex_float] * cptr[gsl_matrix_complex_float] -> int;
  fun gsl_matrix_complex_float_view_array: ptr[float] * size * size -> _gsl_matrix_complex_float_view;
  fun gsl_matrix_complex_float_view_array_with_tda: ptr[float] * size * size * size -> _gsl_matrix_complex_float_view;
  fun gsl_matrix_complex_float_view_vector: ptr[gsl_vector_complex_float] * size * size -> _gsl_matrix_complex_float_view;
  fun gsl_matrix_complex_float_view_vector_with_tda: ptr[gsl_vector_complex_float] * size * size * size -> _gsl_matrix_complex_float_view;
  fun gsl_vector_complex_float_alloc_col_from_matrix: ptr[gsl_matrix_complex_float] * size -> ptr[gsl_vector_complex_float];
  fun gsl_vector_complex_float_alloc_row_from_matrix: ptr[gsl_matrix_complex_float] * size -> ptr[gsl_vector_complex_float];
}
